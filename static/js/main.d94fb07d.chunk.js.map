{"version":3,"sources":["LandingPage/cacti.jpg","LandingPage/LandingPage.tsx","RememberMe/RememberMe.tsx","Football/Competition.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LandingPage","classes","BEMHelper","name","prefix","src","img","alt","RememberMe","Competition","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,mC,wKCqB5BC,EAjBe,WAC5B,IAAMC,EAAU,IAAIC,IAAU,CAC5BC,KAAM,cACNC,OAAQ,OAEV,OACE,wBAASH,IACP,yCAASA,EAAQ,kBAAjB,CAAoCI,IAAKC,IAAKC,IAAI,mBAClD,4BAAaN,EAAQ,aACnB,uBAAQA,EAAQ,UAAhB,WACA,6BACA,4CCSOO,EAtBc,WAC3B,OACE,oCACE,wCAGA,wCAGA,wCAGA,wCAGA,0CCFSC,EAZe,WAC5B,IAAMR,EAAU,IAAIC,IAAU,CAC5BC,KAAM,cACNC,OAAQ,OAEV,OACE,wBAASH,IACP,uBAAQA,EAAQ,UAAhB,uBCmBSS,EAlBO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCVUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d94fb07d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cacti.e5e4383a.jpg\";","import React from 'react';\nimport BEMHelper from 'react-bem-helper';\nimport img from './cacti.jpg'\n\nconst LandingPage: React.FC = () => {\n  const classes = new BEMHelper({\n    name: 'landingpage',\n    prefix: 'c-'\n  });\n  return (\n    <div {...classes()}>\n      <img {...classes('background-pic')} src={img} alt='backgroundpic' />\n      <section {...classes('site-text')}>\n        <h1 {...classes('header')} >talepre</h1>\n        <hr />\n        <h2>developer</h2>\n      </section>\n    </div>\n  );\n}\n\nexport default LandingPage;","import React from 'react';\n\nconst RememberMe: React.FC = () => {\n  return (\n    <>\n      <div>\n        Planter\n      </div>\n      <div>\n        Planter\n      </div>\n      <div>\n        Planter\n      </div>\n      <div>\n        Planter\n      </div>\n      <div>\n        Planter\n      </div>\n    </>\n  );\n}\n\nexport default RememberMe;","import React from 'react';\nimport BEMHelper from 'react-bem-helper';\n\nconst Competition: React.FC = () => {\n  const classes = new BEMHelper({\n    name: 'competition',\n    prefix: 'c-'\n  });\n  return (\n    <div {...classes()}>\n      <h1 {...classes('header')}>Pinnekamp - poeng</h1>\n    </div>\n  );\n}\n\nexport default Competition;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './index.css';\nimport LandingPage from './LandingPage/LandingPage';\nimport RememberMe from './RememberMe/RememberMe';\nimport Competition from './Football/Competition';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/rememberme\">\n          <RememberMe />\n        </Route>\n        <Route path=\"/pinnekamp\">\n          <Competition />\n        </Route>\n        <Route path=\"/\">\n          <LandingPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}